using AutoMapper;
using SftpXmlTask.DTO.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Serialization;
using static System.Runtime.InteropServices.JavaScript.JSType;

//This file is for serialization and was generated by online tool
namespace SftpXmlTask.SftpService
{
    // using System.Xml.Serialization;
    // XmlSerializer serializer = new XmlSerializer(typeof(ORDERFILE));
    // using (StringReader reader = new StringReader(xml))
    // {
    //    var test = (ORDERFILE)serializer.Deserialize(reader);
    // }

    [XmlRoot(ElementName = "NAME")]
    public class NAME
    {

        [XmlElement(ElementName = "LAST-NAME")]
        public string LASTNAME { get; set; }

        [XmlElement(ElementName = "FIRST-NAME")]
        public string FIRSTNAME { get; set; }

        [XmlElement(ElementName = "OIB")]
        public string OIB { get; set; }
    }

    [XmlRoot(ElementName = "ITEM")]
    public class ITEM
    {

        [XmlElement(ElementName = "PRODUCT")]
        public string PRODUCT { get; set; }

        [XmlElement(ElementName = "NUMBER")]
        public int NUMBER { get; set; }

        [XmlElement(ElementName = "PRICE")]
        public decimal PRICE { get; set; }
    }

    [XmlRoot(ElementName = "ORDERS")]
    public class ORDERS
    {

        [XmlElement(ElementName = "ITEM")]
        public List<ITEM> ITEM { get; set; }
    }

    [XmlRoot(ElementName = "CUSTOMER")]
    public class CUSTOMER
    {

        [XmlElement(ElementName = "NAME")]
        public NAME NAME { get; set; }

        [XmlElement(ElementName = "REFERENCENUMBER")]
        public int REFERENCENUMBER { get; set; }

        [XmlElement(ElementName = "DATE")]
        public string? DATE {
            get; set;
        }

        [XmlElement(ElementName = "ORDERS")]
        public ORDERS ORDERS { get; set; }
    }

    [XmlRoot(ElementName = "ORDERFILE")]
    public class ORDERFILE
    {

        [XmlElement(ElementName = "CUSTOMER")]
        public List<CUSTOMER> CUSTOMER { get; set; }
    }


    public class PurchaseOrderProfile : Profile
    {
        public PurchaseOrderProfile()
        {
            CreateMap<CUSTOMER, PurchaseOrder>()
                .ForMember
                (
                    dest => dest.ReferenceNumber,
                    map => map.MapFrom(src => src.REFERENCENUMBER)
                )
                .ForMember
                (
                    dest => dest.PurchaseDate,
                    map => map.MapFrom(src => DateTime.Parse(src.DATE))
                )
                .ForMember
                (
                    dest => dest.Customer,
                    map => map.MapFrom(src => src.NAME)
                )
                .ForMember
                (
                    dest => dest.Product,
                    map => map.MapFrom(src => src.ORDERS.ITEM)
                )
                .ReverseMap()
                .ForMember
                (
                    dest => dest.REFERENCENUMBER,
                    map => map.MapFrom(src => src.ReferenceNumber)
                )
                .ForMember
                (
                    dest => dest.DATE,
                    map => map.MapFrom(src => src.PurchaseDate.ToString())
                )
                .ForMember
                (
                    dest => dest.NAME,
                    map => map.MapFrom(src => src.Customer)
                )
                .ForMember
                (
                    dest => dest.ORDERS,
                    map => map.MapFrom(src => new ORDERS())
                )
                ;

            CreateMap<NAME, Customer>()
                .ForMember
                (
                    dest => dest.FirstName,
                    map => map.MapFrom(src => src.FIRSTNAME)
                )
                .ForMember
                (
                    dest => dest.LastName,
                    map => map.MapFrom(src => src.LASTNAME)
                )
                .ReverseMap()
                .ForMember
                (
                    dest => dest.FIRSTNAME,
                    map => map.MapFrom(src => src.FirstName)
                )
                .ForMember
                (
                    dest => dest.OIB,
                    map => map.MapFrom(src => src.OIB)
                )
                .ForMember
                (
                    dest => dest.LASTNAME,
                    map => map.MapFrom(src => src.LastName)
                )
                .ForAllMembers(o => o.Condition((src, dest, srcMember) => srcMember != null));

            CreateMap<ITEM, Product>()
                .ForMember
                (
                    dest => dest.ProductName,
                    map => map.MapFrom(src => src.PRODUCT)
                )
                .ForMember
                (
                    dest => dest.Quantity,
                    map => map.MapFrom(src => src.NUMBER)
                )
                .ForMember
                (
                    dest => dest.Price,
                    map => map.MapFrom(src => src.PRICE)
                )
                .ReverseMap()
                .ForMember
                (
                    dest => dest.PRODUCT,
                    map => map.MapFrom(src => src.ProductName)
                )
                .ForMember
                (
                    dest => dest.NUMBER,
                    map => map.MapFrom(src => src.Quantity)
                )
                .ForMember
                (
                    dest => dest.PRICE,
                    map => map.MapFrom(src => src.Price)
                )
                .ForAllMembers(o => o.Condition((src, dest, srcMember) => srcMember != null));

        }
    }

}

